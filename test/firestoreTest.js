const admin = require("firebase-admin");
const chai = require("chai");
const chaiAsPromised = require("chai-as-promised");

chai.use(chaiAsPromised);
const { expect } = chai;

// Kh·ªüi t·∫°o Firebase Admin SDK v·ªõi th√¥ng tin x√°c th·ª±c
try {
  admin.initializeApp({
    credential: admin.credential.applicationDefault(),
    projectId: "store-music-fae02", // D·ª± √°n production
  });
} catch (error) {
  console.error("‚ùå L·ªói khi kh·ªüi t·∫°o Firebase Admin SDK:", error.message);
  process.exit(1);
}

const db = admin.firestore();

describe("üî• Ki·ªÉm th·ª≠ Firestore cho E-commerce tr√™n store-music-fae02", function () {
  this.timeout(60000); // Th·ªùi gian ch·ªù 60 gi√¢y
  let testUserRef, testOrderRef, testCartRef, testProductRef, testCategoryRef;

  before(async () => {
    console.log("üõ†Ô∏è Th√™m d·ªØ li·ªáu test...");
    try {
      // Th√™m category
      testCategoryRef = db.collection("categories").doc("testLaptopCategory");
      await testCategoryRef.set({ name: "Test Laptop", parent_id: null });

      // Th√™m user (bao g·ªìm c·∫£ admin v√† customer)
      testUserRef = db.collection("users").doc("testUser");
      await testUserRef.set({ name: "Test User", email: "test@domain.com", role: "customer" });

      const adminUserRef = db.collection("users").doc("testAdminUser");
      await adminUserRef.set({ name: "Test Admin User", email: "testadmin@domain.com", role: "admin" });

      // Th√™m product (laptop)
      testProductRef = db.collection("products").doc("testLaptop1");
      await testProductRef.set({ name: "Test Laptop Dell XPS", price: 1500, stock: 10, category_id: "testLaptopCategory" });

      // Th√™m th√¥ng s·ªë s·∫£n ph·∫©m (product specifications)
      await db.collection("product_specifications").doc("testSpec1").set({
        product_id: "testLaptop1",
        attribute_name: "CPU",
        attribute_value: "Intel i7",
      });
      await db.collection("product_specifications").doc("testSpec2").set({
        product_id: "testLaptop1",
        attribute_name: "RAM",
        attribute_value: "16GB",
      });

      // Th√™m order
      testOrderRef = db.collection("orders").doc("testOrder1");
      await testOrderRef.set({ user_id: "testUser", total: 1500, status: "pending", created_at: new Date() });

      // Th√™m order_items
      await db.collection("order_items").doc("testItem1").set({
        order_id: "testOrder1",
        product_id: "testLaptop1",
        quantity: 1,
        price_at_time: 1500,
      });

      // Th√™m cart
      testCartRef = db.collection("cart").doc("testCart1");
      await testCartRef.set({ user_id: "testUser", product_id: "testLaptop1", quantity: 2 });
    } catch (error) {
      console.error("‚ùå L·ªói trong before hook:", error.message);
      throw error;
    }
  });

  // Test case 1: Ki·ªÉm tra t√≠nh to√†n v·∫πn d·ªØ li·ªáu
  it("‚úÖ Ki·ªÉm tra t√≠nh to√†n v·∫πn: user_id trong orders ph·∫£i t·ªìn t·∫°i trong users", async () => {
    const orderSnapshot = await db.collection("orders").where("user_id", "==", "testUser").get();
    for (const orderDoc of orderSnapshot.docs) {
      const userId = orderDoc.data().user_id;
      if (!userId || typeof userId !== "string" || userId.trim() === "") {
        throw new Error(`user_id kh√¥ng h·ª£p l·ªá trong order ${orderDoc.id}: ${userId}`);
      }
      const userDoc = await db.collection("users").doc(userId).get();
      expect(userDoc.exists, `user_id ${userId} trong order ${orderDoc.id} kh√¥ng t·ªìn t·∫°i trong users`).to.be.true;
    }
    console.log("‚úÖ Ki·ªÉm tra t√≠nh to√†n v·∫πn user_id th√†nh c√¥ng!");
  });

  // Test case 2: Ki·ªÉm tra ch·ª©c nƒÉng - Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
  it("‚úÖ Ki·ªÉm tra th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng", async () => {
    const newCartItemRef = db.collection("cart").doc("testCart2");
    await newCartItemRef.set({ user_id: "testUser", product_id: "testLaptop1", quantity: 1 });

    const cartDoc = await newCartItemRef.get();
    expect(cartDoc.exists).to.be.true;
    expect(cartDoc.data().quantity).to.equal(1);
    console.log("‚úÖ Ki·ªÉm tra th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng th√†nh c√¥ng!");
  });

  // Test case 3: Ki·ªÉm tra giao d·ªãch - ƒê·∫∑t h√†ng v√† gi·∫£m stock
  it("‚úÖ Ki·ªÉm tra giao d·ªãch: ƒë·∫∑t h√†ng v√† gi·∫£m stock", async () => {
    const orderId = "testOrder2";
    const productId = "testLaptop1";
    const quantityToBuy = 2;

    await db.runTransaction(async (transaction) => {
      const productDoc = await transaction.get(db.collection("products").doc(productId));
      if (!productDoc.exists) {
        throw new Error("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!");
      }

      const currentStock = productDoc.data().stock;
      if (currentStock < quantityToBuy) {
        throw new Error("Kh√¥ng ƒë·ªß h√†ng trong kho!");
      }

      transaction.update(db.collection("products").doc(productId), { stock: currentStock - quantityToBuy });
      transaction.set(db.collection("orders").doc(orderId), {
        user_id: "testUser",
        total: quantityToBuy * productDoc.data().price,
        status: "pending",
        created_at: new Date(),
      });
      transaction.set(db.collection("order_items").doc("testItem2"), {
        order_id: orderId,
        product_id: productId,
        quantity: quantityToBuy,
        price_at_time: productDoc.data().price,
      });
    });

    const productDoc = await db.collection("products").doc(productId).get();
    expect(productDoc.data().stock).to.equal(10 - quantityToBuy);
    const orderDoc = await db.collection("orders").doc(orderId).get();
    expect(orderDoc.exists).to.be.true;
    console.log("‚úÖ Ki·ªÉm tra giao d·ªãch ƒë·∫∑t h√†ng v√† gi·∫£m stock th√†nh c√¥ng!");
  });

  // Test case 4: Ki·ªÉm tra hi·ªáu su·∫•t - Truy v·∫•n s·∫£n ph·∫©m theo danh m·ª•c
  it("‚úÖ Ki·ªÉm tra hi·ªáu su·∫•t: truy v·∫•n s·∫£n ph·∫©m theo danh m·ª•c", async () => {
    const batch = db.batch();
    for (let i = 0; i < 1000; i++) {
      const productRef = db.collection("products").doc(`testProduct${i}`);
      batch.set(productRef, {
        name: `Test Product ${i}`,
        price: 100 + i,
        stock: 50,
        category_id: "testLaptopCategory",
      });
    }
    await batch.commit();

    console.time("Truy v·∫•n s·∫£n ph·∫©m theo danh m·ª•c");
    const snapshot = await db.collection("products").where("category_id", "==", "testLaptopCategory").get();
    let count = 0;
    snapshot.forEach(() => count++);
    expect(count).to.equal(1001);
    console.timeEnd("Truy v·∫•n s·∫£n ph·∫©m theo danh m·ª•c");
    console.log("‚úÖ Ki·ªÉm tra hi·ªáu su·∫•t truy v·∫•n s·∫£n ph·∫©m th√†nh c√¥ng!");
  });

  // Test case 5: Ki·ªÉm tra x·ª≠ l√Ω l·ªói - Kh√¥ng cho ph√©p quantity √¢m trong gi·ªè h√†ng
  it("‚úÖ Ki·ªÉm tra x·ª≠ l√Ω l·ªói: kh√¥ng cho ph√©p quantity √¢m trong gi·ªè h√†ng", async () => {
    let errorCaught = false;
    try {
      await db.collection("cart").doc("testCart3").set({
        user_id: "testUser",
        product_id: "testLaptop1",
        quantity: -1,
      });
    } catch (error) {
      errorCaught = true;
      expect(error).to.exist;
    }
    expect(errorCaught).to.be.false;
    console.log("‚úÖ Ki·ªÉm tra x·ª≠ l√Ω l·ªói quantity √¢m th√†nh c√¥ng!");
  });

  // Test case 6: Ki·ªÉm tra truy v·∫•n ph·ª©c t·∫°p - T√¨m s·∫£n ph·∫©m theo th√¥ng s·ªë
  it("‚úÖ Ki·ªÉm tra truy v·∫•n ph·ª©c t·∫°p: t√¨m laptop v·ªõi RAM 16GB", async () => {
    const snapshot = await db.collection("product_specifications")
      .where("attribute_name", "==", "RAM")
      .where("attribute_value", "==", "16GB")
      .get();

    let productIds = [];
    snapshot.forEach(doc => productIds.push(doc.data().product_id));

    expect(productIds).to.include("testLaptop1");
    console.log("‚úÖ Ki·ªÉm tra truy v·∫•n s·∫£n ph·∫©m theo th√¥ng s·ªë th√†nh c√¥ng!");
  });

  // Test case 7: Ki·ªÉm tra x√≥a d·ªØ li·ªáu li√™n quan
  it("‚úÖ Ki·ªÉm tra x√≥a d·ªØ li·ªáu li√™n quan: x√≥a ƒë∆°n h√†ng v√† chi ti·∫øt ƒë∆°n h√†ng", async () => {
    const detailsSnapshot = await db.collection("order_items").where("order_id", "==", "testOrder1").get();
    const batch = db.batch();
    detailsSnapshot.forEach(doc => batch.delete(doc.ref));
    await batch.commit();

    await testOrderRef.delete();

    const orderDoc = await testOrderRef.get();
    expect(orderDoc.exists).to.be.false;

    const remainingDetails = await db.collection("order_items").where("order_id", "==", "testOrder1").get();
    expect(remainingDetails.empty).to.be.true;
    console.log("‚úÖ Ki·ªÉm tra x√≥a ƒë∆°n h√†ng v√† chi ti·∫øt li√™n quan th√†nh c√¥ng!");
  });

  // Test case 8: Ki·ªÉm tra ƒë·ªìng th·ªùi - Nhi·ªÅu ng∆∞·ªùi d√πng ƒë·∫∑t h√†ng c√πng l√∫c
  it("‚úÖ Ki·ªÉm tra ƒë·ªìng th·ªùi: nhi·ªÅu ng∆∞·ªùi d√πng ƒë·∫∑t h√†ng c√πng l√∫c", async () => {
    const productId = "testLaptop1";
    const promises = [];

    // Gi·∫£ l·∫≠p 2 ng∆∞·ªùi d√πng ƒë·∫∑t h√†ng c√πng l√∫c
    for (let i = 0; i < 2; i++) {
      promises.push(
        db.runTransaction(async (transaction) => {
          const productDoc = await transaction.get(db.collection("products").doc(productId));
          const currentStock = productDoc.data().stock;
          if (currentStock < 1) {
            throw new Error("Kh√¥ng ƒë·ªß h√†ng trong kho!");
          }
          transaction.update(db.collection("products").doc(productId), { stock: currentStock - 1 });
          transaction.set(db.collection("orders").doc(`testOrderConcurrent${i}`), {
            user_id: "testUser",
            total: productDoc.data().price,
            status: "pending",
            created_at: new Date(),
          });
        })
      );
    }

    await Promise.all(promises);

    const productDoc = await db.collection("products").doc(productId).get();
    expect(productDoc.data().stock).to.equal(8 - 2); // Stock ban ƒë·∫ßu l√† 8 (sau Test Case 3), gi·∫£m 2
    console.log("‚úÖ Ki·ªÉm tra ƒë·ªìng th·ªùi ƒë·∫∑t h√†ng th√†nh c√¥ng!");
  });

  // Test case 9: Ki·ªÉm tra hi·ªáu su·∫•t - Truy v·∫•n 1,000 s·∫£n ph·∫©m theo danh m·ª•c
  it("‚úÖ Ki·ªÉm tra hi·ªáu su·∫•t: truy v·∫•n 1,000 s·∫£n ph·∫©m theo danh m·ª•c", async () => {
    let batch = db.batch();
    for (let i = 0; i < 1000; i++) {
      const productRef = db.collection("products").doc(`testProductLarge${i}`);
      batch.set(productRef, {
        name: `Test Product ${i}`,
        price: 100 + i,
        stock: 50,
        category_id: "testLaptopCategory",
      });
      if (i % 500 === 0) {
        await batch.commit();
        batch = db.batch();
      }
    }
    await batch.commit();

    console.time("Truy v·∫•n 1,000 s·∫£n ph·∫©m");
    const snapshot = await db.collection("products").where("category_id", "==", "testLaptopCategory").get();
    let count = 0;
    snapshot.forEach(() => count++);
    expect(count).to.equal(1001); // 1,000 s·∫£n ph·∫©m m·ªõi + 1 s·∫£n ph·∫©m ban ƒë·∫ßu
    console.timeEnd("Truy v·∫•n 1,000 s·∫£n ph·∫©m");
    console.log("‚úÖ Ki·ªÉm tra hi·ªáu su·∫•t v·ªõi 1,000 s·∫£n ph·∫©m th√†nh c√¥ng!");
  });

  // Test case 10: Ki·ªÉm tra truy v·∫•n ph·ª©c t·∫°p - T√¨m s·∫£n ph·∫©m theo nhi·ªÅu th√¥ng s·ªë (CPU v√† RAM)
  it("‚úÖ Ki·ªÉm tra truy v·∫•n ph·ª©c t·∫°p: t√¨m laptop v·ªõi CPU Intel i7 v√† RAM 16GB", async () => {
    const cpuSnapshot = await db.collection("product_specifications")
      .where("attribute_name", "==", "CPU")
      .where("attribute_value", "==", "Intel i7")
      .get();

    let productIdsWithCpu = [];
    cpuSnapshot.forEach(doc => productIdsWithCpu.push(doc.data().product_id));

    const ramSnapshot = await db.collection("product_specifications")
      .where("attribute_name", "==", "RAM")
      .where("attribute_value", "==", "16GB")
      .get();

    let productIdsWithRam = [];
    ramSnapshot.forEach(doc => productIdsWithRam.push(doc.data().product_id));

    const matchingProductIds = productIdsWithCpu.filter(id => productIdsWithRam.includes(id));

    expect(matchingProductIds).to.include("testLaptop1");
    console.log("‚úÖ Ki·ªÉm tra truy v·∫•n s·∫£n ph·∫©m theo nhi·ªÅu th√¥ng s·ªë th√†nh c√¥ng!");
  });

  // Test case 11: Ki·ªÉm tra x·ª≠ l√Ω l·ªói - Kh√¥ng cho ph√©p ƒë·∫∑t h√†ng khi stock kh√¥ng ƒë·ªß
  it("‚úÖ Ki·ªÉm tra x·ª≠ l√Ω l·ªói: kh√¥ng cho ph√©p ƒë·∫∑t h√†ng khi stock kh√¥ng ƒë·ªß", async () => {
    const orderId = "testOrder3";
    const productId = "testLaptop1";
    const quantityToBuy = 15;

    let errorCaught = false;
    try {
      await db.runTransaction(async (transaction) => {
        const productDoc = await transaction.get(db.collection("products").doc(productId));
        if (!productDoc.exists) {
          throw new Error("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!");
        }

        const currentStock = productDoc.data().stock;
        if (currentStock < quantityToBuy) {
          throw new Error("Kh√¥ng ƒë·ªß h√†ng trong kho!");
        }

        transaction.update(db.collection("products").doc(productId), { stock: currentStock - quantityToBuy });
        transaction.set(db.collection("orders").doc(orderId), {
          user_id: "testUser",
          total: quantityToBuy * productDoc.data().price,
          status: "pending",
          created_at: new Date(),
        });
      });
    } catch (error) {
      errorCaught = true;
      expect(error.message).to.equal("Kh√¥ng ƒë·ªß h√†ng trong kho!");
    }

    expect(errorCaught).to.be.true;
    const productDoc = await db.collection("products").doc(productId).get();
    expect(productDoc.data().stock).to.equal(6); // Stock l√† 6 sau Test Case 3 v√† 8
    console.log("‚úÖ Ki·ªÉm tra x·ª≠ l√Ω l·ªói khi stock kh√¥ng ƒë·ªß th√†nh c√¥ng!");
  });

  after(async () => {
    console.log("üßπ X√≥a d·ªØ li·ªáu test...");
    try {
      // Ch·ªâ x√≥a d·ªØ li·ªáu test ƒë∆∞·ª£c t·∫°o trong ki·ªÉm th·ª≠
      if (testUserRef) await testUserRef.delete();
      if (testCartRef) await testCartRef.delete();
      if (testCategoryRef) await testCategoryRef.delete();
      if (testProductRef) await testProductRef.delete();
      if (testOrderRef) await testOrderRef.delete();

      // X√≥a c√°c t√†i li·ªáu ƒë∆∞·ª£c t·∫°o trong ki·ªÉm th·ª≠
      const testDocs = [
        { collection: "users", id: "testAdminUser" },
        { collection: "cart", id: "testCart2" },
        { collection: "cart", id: "testCart3" },
        { collection: "orders", id: "testOrder2" },
        { collection: "orders", id: "testOrder3" },
        { collection: "orders", id: "testOrderConcurrent0" },
        { collection: "orders", id: "testOrderConcurrent1" },
        { collection: "order_items", id: "testItem2" },
        { collection: "product_specifications", id: "testSpec1" },
        { collection: "product_specifications", id: "testSpec2" },
      ];

      for (const doc of testDocs) {
        await db.collection(doc.collection).doc(doc.id).delete();
      }

      // X√≥a c√°c s·∫£n ph·∫©m test ƒë∆∞·ª£c t·∫°o trong Test Case 4 v√† 9
      const testProducts = await db.collection("products").where("category_id", "==", "testLaptopCategory").get();
      const batch = db.batch();
      testProducts.forEach(doc => batch.delete(doc.ref));
      await batch.commit();
    } catch (error) {
      console.error("‚ùå L·ªói trong after hook:", error.message);
    }
  });
});