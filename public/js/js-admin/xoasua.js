import { initializeApp } from "https://www.gstatic.com/firebasejs/9.13.0/firebase-app.js";
import { getFirestore, doc, getDoc, deleteDoc, updateDoc, setDoc, collection, getDocs } from "https://www.gstatic.com/firebasejs/9.13.0/firebase-firestore.js";
import { getStorage, ref, uploadBytes, getDownloadURL, deleteObject } from "https://www.gstatic.com/firebasejs/9.13.0/firebase-storage.js";

// üî• C·∫•u h√¨nh Firebase
const firebaseConfig = {
    apiKey: "AIzaSyDMKBDgcjZaFh2LDPs9ZuQzQFHMuZtnOPA",
    authDomain: "store-music-fae02.firebaseapp.com",
    projectId: "store-music-fae02",
    storageBucket: "store-music-fae02.appspot.com",
    messagingSenderId: "35440000355",
    appId: "1:35440000355:web:7f49a002690331b9812756"
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const storage = getStorage(app);

// üìå L·∫•y ID s·∫£n ph·∫©m t·ª´ URL
const urlParams = new URLSearchParams(window.location.search);
const productId = urlParams.get('id');

// üîπ T·∫£i danh s√°ch s·∫£n ph·∫©m
async function loadProductList() {
    const productList = document.getElementById("productList");
    productList.innerHTML = "";

    try {
        const querySnapshot = await getDocs(collection(db, "products", "laptop", "items"));
        querySnapshot.forEach(doc => {
            const product = doc.data();
            const card = document.createElement("div");
            card.classList.add("product-card");

            card.innerHTML = `
                <img src="${product.imageURLs?.[0] || 'placeholder.jpg'}" alt="${product.name}">
                <h3>${product.name}</h3>
                <p>H√£ng: ${product.brand}</p>
                <p>ƒê√£ b√°n: ${product.sold || 0}</p>
                <p>ƒê√°nh gi√°: ${product.rating || "Ch∆∞a c√≥"}/5‚≠ê</p>
                <button class="edit-btn" data-id="${doc.id}">S·ª≠a</button>
                <button class="delete-btn" data-id="${doc.id}">X√≥a</button>
            `;
            productList.appendChild(card);
        });
        document.querySelectorAll(".edit-btn").forEach(button => {
            button.addEventListener("click", () => editProduct(button.dataset.id));
        });
        document.querySelectorAll(".delete-btn").forEach(button => {
            button.addEventListener("click", () => deleteLaptop(button.dataset.id));
        });
    } catch (error) {
        console.error("L·ªói khi t·∫£i danh s√°ch s·∫£n ph·∫©m:", error);
    }
}

// üîπ Ch·ªânh s·ª≠a s·∫£n ph·∫©m
async function editProduct(id) {
    try {
        const docRef = doc(db, "products", "laptop", "items", id);
        const docSnap = await getDoc(docRef);
        if (docSnap.exists()) {
            setLaptopDetails(docSnap.data(), docSnap.id);
        } else {
            alert("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i.");
        }
    } catch (error) {
        console.error("L·ªói khi t·∫£i s·∫£n ph·∫©m:", error);
    }
}

// üîπ Hi·ªÉn th·ªã th√¥ng tin l√™n form
function setLaptopDetails(laptop, id) {
    document.getElementById('productId').value = id;
    Object.keys(laptop).forEach(key => {
        if (document.getElementById(key)) {
            document.getElementById(key).value = laptop[key];
        }
    });

    // Hi·ªÉn th·ªã ·∫£nh
    const previewContainer = document.getElementById("previewImages");
    previewContainer.innerHTML = "";
    if (laptop.imageURLs) {
        laptop.imageURLs.forEach(url => {
            const img = document.createElement("img");
            img.src = url;
            img.style.maxWidth = "100px";
            img.style.margin = "5px";
            previewContainer.appendChild(img);
        });
    }
}

// üîπ L∆∞u Laptop v·ªõi nhi·ªÅu ·∫£nh
async function saveLaptop(event) {
    event.preventDefault();

    const productIdInput = document.getElementById('productId').value.trim();
    const laptopData = {};

    ["name", "brand", "model", "cpu", "ram", "storage", "gpu", "screen", "battery", "os", "warranty", "description", "price", "discount", "stock", "weight", "ports", "category", "sold", "rating"].forEach(id => {
        laptopData[id] = document.getElementById(id)?.value || "";
    });

    laptopData.price = parseFloat(laptopData.price) || 0;
    laptopData.discount = parseFloat(laptopData.discount) || 0;
    laptopData.stock = parseInt(laptopData.stock) || 0;
    laptopData.sold = parseInt(laptopData.sold) || 0;
    laptopData.rating = parseFloat(laptopData.rating) || 0;
    laptopData.weight = parseFloat(laptopData.weight) || 0;

    if (!laptopData.name || !laptopData.brand || !laptopData.model) {
        alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin Laptop!");
        return;
    }

    try {
        const imageFiles = document.getElementById('image').files;
        let imageURLs = [];

        for (const file of imageFiles) {
            const storageRef = ref(storage, `images/laptop/${Date.now()}_${file.name}`);
            await uploadBytes(storageRef, file);
            const downloadURL = await getDownloadURL(storageRef);
            imageURLs.push(downloadURL);
        }

        if (imageURLs.length > 0) {
            laptopData.imageURLs = imageURLs;
        }

        if (!productIdInput) {
            alert("Vui l√≤ng nh·∫≠p ID s·∫£n ph·∫©m!");
            return;
        }

        await setDoc(doc(db, "products", "laptop", "items", productIdInput), laptopData);
        alert("S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c l∆∞u!");

        window.location.href = 'xoasua.html';
    } catch (error) {
        console.error("L·ªói khi l∆∞u s·∫£n ph·∫©m:", error);
    }
}
// üîπ X√≥a ·∫£nh kh·ªèi Firebase Storage
async function deleteImageFromStorage(imageURL) {
    if (!imageURL) return;
    try {
        const imageRef = ref(storage, imageURL);
        await deleteObject(imageRef);
        console.log("üóë ·∫¢nh ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi Firebase Storage:", imageURL);
    } catch (error) {
        console.error("‚ùå L·ªói khi x√≥a ·∫£nh t·ª´ Storage:", error);
    }
}
// üîπ X√≥a Laptop
async function deleteLaptop(id) {
    if (!id) {
        alert("Kh√¥ng t√¨m th·∫•y ID s·∫£n ph·∫©m ƒë·ªÉ x√≥a.");
        return;
    }
    if (!confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m n√†y?")) return;
    try {
        const docRef = doc(db, "products", "laptop", "items", id);
        const docSnap = await getDoc(docRef);
        if (docSnap.exists()) {
            const productData = docSnap.data();
            const imageURLs = productData.imageURLs || [];
            await Promise.all(imageURLs.map(deleteImageFromStorage));
        }
        await deleteDoc(docRef);
        alert("S·∫£n ph·∫©m laptop ƒë√£ ƒë∆∞·ª£c x√≥a.");
        loadProductList();
    } catch (error) {
        console.error("L·ªói khi x√≥a s·∫£n ph·∫©m:", error);
    }
}

// üìå Xem tr∆∞·ªõc ·∫£nh m·ªõi t·∫£i l√™n
document.getElementById("image").addEventListener("change", function (event) {
    const previewNewImages = document.getElementById("previewNewImages");
    previewNewImages.innerHTML = ""; // X√≥a preview c≈© tr∆∞·ªõc khi hi·ªÉn th·ªã m·ªõi
    const files = event.target.files;

    for (const file of files) {
        const reader = new FileReader();
        reader.onload = function (e) {
            const imgWrapper = document.createElement("div");
            imgWrapper.classList.add("image-wrapper");
            imgWrapper.innerHTML = `
                <img src="${e.target.result}" class="preview-image" alt="New Image">
                <button class="remove-btn">‚ùå</button>
            `;
            previewNewImages.appendChild(imgWrapper);

            // X√≥a ·∫£nh m·ªõi khi b·∫•m n√∫t ‚ùå
            imgWrapper.querySelector(".remove-btn").addEventListener("click", function () {
                imgWrapper.remove();
            });
        };
        reader.readAsDataURL(file);
    }
});

// Hi·ªÉn th·ªã ·∫£nh ƒë√£ l∆∞u trong Firebase
function displayStoredImages(images) {
    const previewImages = document.getElementById("previewImages");
    previewImages.innerHTML = ""; // X√≥a danh s√°ch c≈©
    
    images.forEach((imageURL, index) => {
        const imgWrapper = document.createElement("div");
        imgWrapper.classList.add("image-wrapper");
        imgWrapper.innerHTML = `
            <img src="${imageURL}" class="preview-image" alt="Stored Image">
            <button class="remove-btn" data-index="${index}">‚ùå</button>
        `;
        previewImages.appendChild(imgWrapper);

        // X√≥a ·∫£nh ƒë√£ l∆∞u khi b·∫•m n√∫t ‚ùå
        imgWrapper.querySelector(".remove-btn").addEventListener("click", function () {
            if (confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ·∫£nh n√†y?")) {
                images.splice(index, 1); // X√≥a ·∫£nh kh·ªèi danh s√°ch
                displayStoredImages(images); // C·∫≠p nh·∫≠t giao di·ªán
            }
        });
    });
}

// üìå L·∫Øng nghe s·ª± ki·ªán khi DOM ƒë√£ t·∫£i xong
document.addEventListener("DOMContentLoaded", () => {
    loadProductList();
    if (productId) {
        editProduct(productId);
    }

    document.getElementById("saveButton")?.addEventListener("click", saveLaptop);
    document.getElementById("updateButton")?.addEventListener("click", saveLaptop);
    document.getElementById("deleteButton")?.addEventListener("click", () => deleteLaptop(productId));
});
